import{_ as s,c as a,a as l,o as n}from"./app-BNTEi0NL.js";const e={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h2 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性"><span>可见性</span></a></h2><blockquote><p>防止某个线程正在使用对象状态而另外一个线程同时修改该状态，而且确保当一个线程修改了对象状态后其他线程能看到发生的状态变化</p></blockquote><h3 id="失效数据" tabindex="-1"><a class="header-anchor" href="#失效数据"><span>失效数据</span></a></h3><blockquote><p>在缺乏同步的程序中可能会出现的错误结果,例如下例get方法在多线程中可能会读取到一个已经失效的值。除非每次访问时都同步， 否则可能获得该变量的一个失效值</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MutableInteget</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> set</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非原子的64位操作" tabindex="-1"><a class="header-anchor" href="#非原子的64位操作"><span>非原子的64位操作</span></a></h3><blockquote><p>最低安全性: 当线程在没有同步的情况下读取变量时，可能会得到一个失效值，但至少是这个值由之前的线程设置的，而不是一个随机值。这种安全性保证也被成为最低安全性</p></blockquote><div class="hint-container warning"><p class="hint-container-title">注意</p><p>最低安全性适用于绝大多数的变量，但是有一个例外：非volatile类型的64位数值。</p></div><p>Java内存模型要求，变量的读取和写入操作都必须是原子操作. 但对于非volatile的long和double变量，jvm允许将64位读操作和写操作分为两个32位操作。 当读取到一个非volatile的long变量时，如果对变量的读操作和写操作在不同的线程中执行，那么很有可能会读取到某个值的高32位和另一个值的低32位。</p><h3 id="加锁与可见性" tabindex="-1"><a class="header-anchor" href="#加锁与可见性"><span>加锁与可见性</span></a></h3><blockquote><p>加锁的含义不仅仅局限于互斥行为，还包括内存可见性。为了确保所有线程都能看到变量的最新值，所有执行读操作或者写操作的线程都必须在同一个锁上同步。</p></blockquote><h3 id="volatile变量" tabindex="-1"><a class="header-anchor" href="#volatile变量"><span>volatile变量</span></a></h3><p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>加锁机制既可以确保可见性也可以确保原子性，而volatile变量只能确保可见性</p></div><p>当且仅当满足一下条件时，才可以使用volatile变量</p><ul><li>对变量的写入操作不依赖变量当前值，或者确保只有单个线程更新变量的值</li><li>该变量不会与其他状态变量一起纳入不变性条件中</li><li>在访问变量时不需要加锁</li></ul><h2 id="线程封闭" tabindex="-1"><a class="header-anchor" href="#线程封闭"><span>线程封闭</span></a></h2><blockquote><p>当访问共享的可变数据时，通常需要使用同步。一种避免使用同步的方式就是不共享数据。如果仅在单线程内访问数据，就不需要同步。这种技术被称为线程封闭</p></blockquote><p>常见的线程封闭技术例如JDBC，在典型的服务器应用中，线程从连接池获得一个Connection对象，并且用该对象来处理请求，使用完后在将对象返还给连接池。 由于大多数请求（例如servlet请求）都是由单个线程采用同步的方式来处理，并且在Connection对象返回之前，连接池不会再将其分配给其他线程。 因此，这种 连接管理模式在处理请求时隐含地将Connection对象封闭在线程中</p><h3 id="ad-hoc线程封闭" tabindex="-1"><a class="header-anchor" href="#ad-hoc线程封闭"><span>Ad-hoc线程封闭</span></a></h3><p>Ad-hoc线程封闭是指，维护线程封闭性的职责完全由程序实现来承担。例如可见性修饰符或局部变量，能将对象封闭到目标线程上。</p><h3 id="栈封闭" tabindex="-1"><a class="header-anchor" href="#栈封闭"><span>栈封闭</span></a></h3><p>栈封闭是线程封闭的一种特例，在栈封闭中，只能通过局部变量才能访问对象。在方法内部声明的局部变量是栈封闭的，因为它们仅存在于方法的执行上下文中，不会被其他线程访问。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> StackConfinementExample</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doSomething</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> localVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 局部变量，栈封闭</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 其他线程无法访问localVariable，因此是线程安全的</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">localVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="threadlocal类" tabindex="-1"><a class="header-anchor" href="#threadlocal类"><span>ThreadLocal类</span></a></h3><p>维持线程封闭的一种更规范的方式是使用TreadLocal，这个类能使线程中的某个值与保存值的对象关联起来。ThreadLocal提供了get和set等访问方法，这些方法为 每个使用变量的线程都存有一份独立的副本，因此get总是返回由当前执行线程在调用set是设置的最新值。</p><h2 id="不变性" tabindex="-1"><a class="header-anchor" href="#不变性"><span>不变性</span></a></h2><p>满足同步需求的另外一种方法是使用不可变对象。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不可变对象一定是线程安全的。</p></div><h3 id="使用volatile类型来发布不可变对象" tabindex="-1"><a class="header-anchor" href="#使用volatile类型来发布不可变对象"><span>使用Volatile类型来发布不可变对象</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ImmutableExample</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> volatile</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ImmutableObject</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> immutableObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> updateImmutableObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">newValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        immutableObject </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ImmutableObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">newValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ImmutableObject </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getImmutableObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> immutableObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">final</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ImmutableObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ImmutableObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释</strong></p><ul><li>ImmutableObject类：这个类是不可变的。它的字段value是final，并且仅通过构造函数赋值，之后不能再修改。</li><li>volatile关键字：ImmutableExample类中的immutableObject字段被声明为volatile，这意味着当一个线程更新immutableObject时，其他线程能立即看到这个更新。</li><li>发布：当immutableObject被赋值时，新创建的不可变对象立即对其他线程可见。</li></ul><p><strong>使用volatile的优点</strong></p><ul><li>可见性：volatile保证了所有线程对最新值的可见性，这在多线程环境中非常重要。</li><li>线程安全：由于不可变对象一旦创建后不能改变，它们本质上是线程安全的。使用volatile发布不可变对象可以确保引用的最新性。</li><li>轻量级锁机制：相比使用sychronized或其他显式锁，volatile提供了更轻量级的同步机制，不涉及线程阻塞和上下文切换的开销。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>只适用于不可变对象：使用volatile发布可变对象时要格外小心。尽管volatile能确保引用的可见性，但它不能保证对象内部状态的同步。</li><li>原子性：volatile仅能保证引用的可见性和有序性，不能保证操作的原子性。对volatile变量的复合操作（如递增）仍然需要同步。</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在并发程序中使用和共享对象时，可以使用一些使用的策略，包括</p><ul><li>线程封闭：线程封闭对象只能由一个线程拥有，对象被封闭在线程中，并且只能由这个线程修改</li><li>只读共享：在没有额外同步的情况下，共享的只读对象可以由多个程序并发访问，但任何线程都不能修改它，共享的只读对象包括不可变对象和事实不可变对象</li><li>线程安全共享：线程安全的对象在其内部实现同步吗，因此多个线程可以通过对象的公有接口进行访问，而不需要进一步的同步</li><li>保护对象：被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且有某个特定锁保护的对象。</li></ul></div>`,37)]))}const k=s(e,[["render",t],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/Java-Concurrency-in-Practice/0ekqfws4/","title":"对象的共享","lang":"zh-CN","frontmatter":{"title":"对象的共享","author":"GaoJ","createTime":"2024/08/27 20:30:04","permalink":"/Java-Concurrency-in-Practice/0ekqfws4/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"可见性","slug":"可见性","link":"#可见性","children":[{"level":3,"title":"失效数据","slug":"失效数据","link":"#失效数据","children":[]},{"level":3,"title":"非原子的64位操作","slug":"非原子的64位操作","link":"#非原子的64位操作","children":[]},{"level":3,"title":"加锁与可见性","slug":"加锁与可见性","link":"#加锁与可见性","children":[]},{"level":3,"title":"volatile变量","slug":"volatile变量","link":"#volatile变量","children":[]}]},{"level":2,"title":"线程封闭","slug":"线程封闭","link":"#线程封闭","children":[{"level":3,"title":"Ad-hoc线程封闭","slug":"ad-hoc线程封闭","link":"#ad-hoc线程封闭","children":[]},{"level":3,"title":"栈封闭","slug":"栈封闭","link":"#栈封闭","children":[]},{"level":3,"title":"ThreadLocal类","slug":"threadlocal类","link":"#threadlocal类","children":[]}]},{"level":2,"title":"不变性","slug":"不变性","link":"#不变性","children":[{"level":3,"title":"使用Volatile类型来发布不可变对象","slug":"使用volatile类型来发布不可变对象","link":"#使用volatile类型来发布不可变对象","children":[]}]}],"readingTime":{"minutes":6.01,"words":1804},"git":{"updatedTime":1724850296000,"contributors":[{"name":"GaoJ","email":"84425239+GaoJ-coder@users.noreply.github.com","commits":1}]},"filePathRelative":"notes/Java-Concurrency-in-Practice/Object-Shared.md"}`);export{k as comp,d as data};
